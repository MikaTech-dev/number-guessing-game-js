<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Number Guessing Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3a0ca3;
            --success: #4cc9f0;
            --warning: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --border-radius: 12px;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            width: 100%;
            max-width: 800px;
            overflow: hidden;
            margin: 0 auto;
        }

        .header {
            background: var(--primary);
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        .header h1 {
            font-size: 2.2rem;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .header h1::before {
            content: "🎮";
        }

        .section {
            padding: 25px;
            transition: var(--transition);
        }

        .section-title {
            font-size: 1.5rem;
            color: var(--primary);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--light-gray);
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark);
        }

        input, select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid var(--light-gray);
            border-radius: var(--border-radius);
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            transition: var(--transition);
        }

        input:focus, select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: var(--border-radius);
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
        }

        .btn:disabled {
            background: var(--gray);
            cursor: not-allowed;
            transform: none;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #d81159;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3bb4d8;
        }

        .card {
            background: var(--light);
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .session-id {
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--primary);
            letter-spacing: 2px;
            background: var(--light-gray);
            padding: 10px 15px;
            border-radius: var(--border-radius);
            text-align: center;
            margin: 15px 0;
        }

        .player-list {
            list-style: none;
            margin-top: 15px;
        }

        .player-list li {
            padding: 10px 15px;
            background: white;
            border-radius: var(--border-radius);
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .player-list li span {
            font-weight: 500;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .info-item {
            background: var(--light);
            padding: 15px;
            border-radius: var(--border-radius);
            text-align: center;
            flex: 1;
            min-width: 120px;
        }

        .info-item h3 {
            font-size: 0.9rem;
            color: var(--gray);
            margin-bottom: 5px;
        }

        .info-item p {
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--primary);
        }

        #gameMessages {
            height: 300px;
            overflow-y: auto;
            border: 2px solid var(--light-gray);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
            background: white;
        }

        .message {
            margin: 10px 0;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .system {
            background: var(--light-gray);
            color: var(--dark);
            margin: 0 auto;
            text-align: center;
            font-weight: 500;
            max-width: 100%;
        }

        .chat {
            background: #e9e8ea;
            color: var(--dark);
            align-self: flex-start;
        }

        .chat-self {
            background: var(--primary);
            color: white;
            align-self: flex-end;
            margin-left: auto;
        }

        .guess-result {
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid #ffc107;
        }

        .win {
            background: #d4edda;
            color: #155724;
            font-weight: 700;
            text-align: center;
            max-width: 100%;
        }

        .timeout {
            background: #f8d7da;
            color: #721c24;
            text-align: center;
            max-width: 100%;
        }

        .guess-form {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .guess-form input {
            flex: 1;
        }

        .status-message {
            padding: 10px 15px;
            border-radius: var(--border-radius);
            margin-top: 15px;
            font-weight: 500;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        .success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .section {
                padding: 20px;
            }
            
            .game-info {
                flex-direction: column;
            }
            
            .info-item {
                width: 100%;
            }
            
            .message {
                max-width: 90%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Number Guessing Game</h1>
        </div>

        <!-- 1. Initial Lobby (Username/Role Selection) -->
        <div id="lobbySection" class="section">
            <h2 class="section-title">Lobby</h2>
            <div class="form-group">
                <label for="usernameInput">Your Name</label>
                <input type="text" id="usernameInput" placeholder="Enter your name">
            </div>
            <div class="form-group">
                <label for="roleSelect">Your Role</label>
                <select id="roleSelect">
                    <option value="player">Player</option>
                    <option value="gameMaster">Host</option>
                </select>
            </div>
            <button id="joinButton" class="btn">Join Lobby</button>
            <div id="statusMessage" class="status-message"></div>
        </div>

        <!-- 2. Game Master Section (Create Session) -->
        <div id="gmSection" class="section hidden">
            <h2 class="section-title">Host Dashboard</h2>
            <div class="card">
                <p>Welcome, <strong><span id="gmName"></span></strong>!</p>
            </div>
            
            <div class="form-group">
                <label for="difficultySelect">Select Difficulty</label>
                <select id="difficultySelect">
                    <option value="easy">Easy (1-50)</option>
                    <option value="medium" selected>Medium (1-100)</option>
                    <option value="hard">Hard (1-500)</option>
                </select>
            </div>
            
            <button id="createSessionButton" class="btn">Create New Game Session</button>
            
            <div class="card hidden" id="sessionInfo">
                <p>Share this Session ID with players:</p>
                <div class="session-id"><span id="sessionIdDisplay"></span></div>
            </div>
            
            <div id="gmStatusMessage" class="status-message"></div>
            
            <h3 class="section-title">Players in Session</h3>
            <ul id="playerList" class="player-list"></ul>
            
            <button id="startGameButton" class="btn btn-success" disabled>Start Game (Need 2+ players)</button>
        </div>

        <!-- 3. Player Section (Join Session) -->
        <div id="playerSection" class="section hidden">
            <h2 class="section-title">Player Dashboard</h2>
            <div class="card">
                <p>Welcome, <strong><span id="playerName"></span></strong>!</p>
            </div>
            
            <div class="form-group">
                <label for="sessionIdInput">Enter Session ID</label>
                <input type="text" id="sessionIdInput" placeholder="e.g., A1B2C3">
            </div>
            
            <button id="joinSessionButton" class="btn">Join Game Session</button>
            <div id="playerStatusMessage" class="status-message"></div>
            
            <h3 class="section-title">Players in Session</h3>
            <ul id="playerListPlayer" class="player-list"></ul>
        </div>

        <!-- 4. Game Room (Common for all players once game starts) -->
        <div id="gameRoomSection" class="section hidden">
            <h2 class="section-title">Game Room</h2>
            
            <div class="game-info">
                <div class="info-item">
                    <h3>Session ID</h3>
                    <p id="gameRoomSessionId"></p>
                </div>
                <div class="info-item">
                    <h3>Range</h3>
                    <p id="numberRange"></p>
                </div>
                <div class="info-item">
                    <h3>Time Left</h3>
                    <p id="timer">60s</p>
                </div>
                <div class="info-item">
                    <h3>Attempts Left</h3>
                    <p id="attemptsLeft">3</p>
                </div>
            </div>
            
            <div id="gameMessages"></div>
            
            <div class="guess-form">
                <input type="text" id="guessInput" placeholder="Enter your guess or chat message">
                <button id="sendGuessButton" class="btn">Send</button>
                <button id="leaveGameButton" class="btn btn-warning">Leave Game</button>
            </div>
            
            <div id="gameRoomStatus" class="status-message"></div>
        </div>
    </div>

    <!-- Include Socket.IO client library -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentUser = null;
        let currentSessionId = null;
        let timerInterval = null;

        // --- DOM Elements ---
        const lobbySection = document.getElementById('lobbySection');
        const gmSection = document.getElementById('gmSection');
        const playerSection = document.getElementById('playerSection');
        const gameRoomSection = document.getElementById('gameRoomSection');

        const statusMessage = document.getElementById('statusMessage');
        const gmStatusMessage = document.getElementById('gmStatusMessage');
        const playerStatusMessage = document.getElementById('playerStatusMessage');
        const gameRoomStatus = document.getElementById('gameRoomStatus');

        const joinButton = document.getElementById('joinButton');
        const createSessionButton = document.getElementById('createSessionButton');
        const joinSessionButton = document.getElementById('joinSessionButton');
        const startGameButton = document.getElementById('startGameButton');
        const sendGuessButton = document.getElementById('sendGuessButton');

        // --- Utility Functions ---
        function showSection(sectionToShow) {
            lobbySection.classList.add('hidden');
            gmSection.classList.add('hidden');
            playerSection.classList.add('hidden');
            gameRoomSection.classList.add('hidden');
            sectionToShow.classList.remove('hidden');
        }

        function addMessage(containerId, message, className = '') {
            const container = document.getElementById(containerId);
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            if (className) messageElement.classList.add(className);
            messageElement.innerText = message;
            container.appendChild(messageElement);
            container.scrollTop = container.scrollHeight; // Auto-scroll
        }

        function updatePlayerList(listElementId, players) {
            const listElement = document.getElementById(listElementId);
            listElement.innerHTML = ''; // Clear list
            players.forEach(player => {
                const listItem = document.createElement('li');
                listItem.textContent = `${player.username} (Score: ${player.score}, Attempts: ${player.attemptsLeft})`;
                listElement.appendChild(listItem);
            });
        }

        // --- 1. Initial Lobby Logic ---
        joinButton.addEventListener('click', () => {
            const username = document.getElementById('usernameInput').value.trim();
            const role = document.getElementById('roleSelect').value;

            if (!username) {
                statusMessage.innerText = "Please enter a username.";
                statusMessage.className = "status-message error";
                return;
            }

            socket.emit('setUser', { username, role });
        });

        socket.on('userSet', (data) => {
            currentUser = data;
            console.log("User set successfully:", data);
            statusMessage.innerText = `Welcome, ${data.username} (${data.role})!`;
            statusMessage.className = "status-message success";

            if (data.role === 'gameMaster') {
                document.getElementById('gmName').innerText = data.username;
                showSection(gmSection);
            } else if (data.role === 'player') {
                document.getElementById('playerName').innerText = data.username;
                showSection(playerSection);
            }
        });

        // --- 2. Game Master Logic ---
        createSessionButton.addEventListener('click', () => {
            const difficulty = document.getElementById('difficultySelect').value;
            socket.emit('createSession', { difficulty });
        });

        socket.on('sessionCreated', (data) => {
            currentSessionId = data.sessionId;
            console.log("Session created:", data);
            document.getElementById('sessionIdDisplay').innerText = data.sessionId;
            document.getElementById('sessionInfo').classList.remove('hidden');
            gmStatusMessage.innerText = "Session created! Share the ID with players.";
            gmStatusMessage.className = "status-message success";
            
            // Update player list
            updatePlayerList('playerList', data.players);

            // Enable start button if enough players
            startGameButton.disabled = data.players.length < 2;
        });

        startGameButton.addEventListener('click', () => {
             if (currentSessionId) {
                 socket.emit('startGame', { sessionId: currentSessionId });
             }
        });

        // --- 3. Player Logic ---
        joinSessionButton.addEventListener('click', () => {
            const sessionId = document.getElementById('sessionIdInput').value.trim();
            if (!sessionId) {
                playerStatusMessage.innerText = "Please enter a Session ID.";
                playerStatusMessage.className = "status-message error";
                return;
            }
            socket.emit('joinSession', { sessionId });
        });

        socket.on('sessionJoined', (data) => {
            currentSessionId = data.sessionId;
            console.log("Session joined:", data);
            playerStatusMessage.innerText = "Joined session successfully!";
            playerStatusMessage.className = "status-message success";
            updatePlayerList('playerListPlayer', data.players);
            // Wait for game to start...
        });

        // --- 4. Common Session Updates (for GM and Players waiting) ---
        socket.on('playerJoined', (data) => {
            console.log("Player joined session:", data);
            // Update player lists on both GM and Player views
            const gmPlayerList = document.getElementById('playerList');
            const playerPlayerList = document.getElementById('playerListPlayer');
            if (gmPlayerList) {
                if (data.players) {
                     updatePlayerList('playerList', data.players);
                     // Enable start button for GM if enough players
                     startGameButton.disabled = data.players.length < 2;
                }
            }
            if (playerPlayerList && data.players) {
                updatePlayerList('playerListPlayer', data.players);
            }
        });

        // --- 5. Game Start Logic ---
        socket.on('gameStarted', (data) => {
            console.log("Game started:", data);
            document.getElementById('gameRoomSessionId').innerText = currentSessionId;
            document.getElementById('numberRange').innerText = `${data.secretNumberRange.min} - ${data.secretNumberRange.max}`;
            
            // Show game room
            showSection(gameRoomSection);
            
            addMessage('gameMessages', "🏁 Game Started! Good luck!", 'system');
            
            // Start timer
            let timeLeft = 60; // Default or get from data.roundEndTime
            if (data.roundEndTime) {
                 const endTime = new Date(data.roundEndTime).getTime();
                 const now = new Date().getTime();
                 timeLeft = Math.floor((endTime - now) / 1000);
            }
            document.getElementById('timer').innerText = timeLeft;

            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                timeLeft--;
                document.getElementById('timer').innerText = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                }
            }, 1000);
        });

        // --- 6. Gameplay Logic ---
        sendGuessButton.addEventListener('click', () => {
            const inputText = document.getElementById('guessInput').value.trim();
            if (!inputText || !currentSessionId) return;

            // Check if input is a valid integer string (guess) or just text (chat) with regex validation
            if (/^-?\d+$/.test(inputText)) { // Regex to check for integer string
                // If it's a number, treat as guess
                socket.emit('makeGuess', { sessionId: currentSessionId, guess: inputText });
            } else {
                // Else, treat as chat message
                socket.emit('sendChatMessage', { sessionId: currentSessionId, message: inputText });
            }
            document.getElementById('guessInput').value = ''; // Clear input regardless
        });

        // --- Leave Game ---
        const leaveGameButton = document.getElementById('leaveGameButton');
        leaveGameButton && (leaveGameButton.addEventListener('click', () => {
            if (!currentSessionId) return;

            // Disable button to prevent repeated clicks
            leaveGameButton.disabled = true;

            // Emit leave request and wait for server ack so broadcasts reach the leaving client
            socket.emit('leaveSession', { sessionId: currentSessionId });

            // Optionally show local system message indicating leaving in progress
            addMessage('gameMessages', `You are leaving session ${currentSessionId}...`, 'system');
        }));

        // Listen for server broadcast that a player left (will include the leaver)
        socket.on('playerLeft', (data) => {
            if (!data || !data.username) return;
            const msg = `🚪 ${data.username} has left the game.`;
            addMessage('gameMessages', msg, 'system');
            // Update player lists if provided
            if (data.players) {
                updatePlayerList('playerList', data.players);
                updatePlayerList('playerListPlayer', data.players);
            }
        });

        // When server confirms we've left, disconnect and reload after a short delay
        socket.on('leftSession', (data) => {
            if (data && data.ok) {
                // Small delay to ensure 'playerLeft' broadcast is rendered locally
                setTimeout(() => {
                    try { socket.disconnect(); } catch (e) {}
                    location.reload();
                }, 700);
            }
        });

        socket.on('chatMessageReceived', (data) => {
            console.log("Chat message received:", data);
            // Format the message for display
            const formattedMessage = `${data.username}: ${data.message}`;
            // Add it to the chatbox
            const messageClass = data.isSelf ? "chat-self" : "chat";
            addMessage('gameMessages', formattedMessage, messageClass);
        });

        socket.on('guessResult', (data) => {
            console.log("Guess result:", data);
            if (data.isValid) {
                if (data.isCorrect) {
                    addMessage('gameMessages', data.message, 'win');
                } else {
                    addMessage('gameMessages', data.message, 'guess-result');
                    document.getElementById('attemptsLeft').innerText = data.attemptsLeft;
                }
            } else {
                addMessage('gameMessages', data.message, 'system');
            }
        });

        socket.on('playerGuessed', (data) => {
            // Notify other players a guess was made
             addMessage('gameMessages', data.message, 'system');
        });

        // --- 7. Game End Logic ---
         socket.on('gameWon', (data) => {
            console.log("Game won:", data);
            clearInterval(timerInterval);
            addMessage('gameMessages', data.message, 'win');
            // Optionally, show a "Game Over" screen or redirect to lobby
            // For now, just stop interaction
            document.getElementById('guessInput').disabled = true;
            document.getElementById('sendGuessButton').disabled = true;
            gameRoomStatus.innerText = "Game Over!";
            gameRoomStatus.className = "status-message";
         });

         socket.on('gameTimeout', (data) => {
            console.log("Game timeout:", data);
            clearInterval(timerInterval);
            addMessage('gameMessages', `⏰ ${data.message} The number was ${data.secretNumber}.`, 'timeout');
            document.getElementById('guessInput').disabled = true;
            document.getElementById('sendGuessButton').disabled = true;
            gameRoomStatus.innerText = "Game Over!";
            gameRoomStatus.className = "status-message";
         });

        // --- 8. Error Handling ---
        socket.on('error', (data) => {
            console.error("Server Error:", data.message);
            // Display error message in the relevant section
            if (gmSection.classList.contains('hidden') === false) {
                gmStatusMessage.innerText = "Error: " + data.message;
                gmStatusMessage.className = "status-message error";
            } else if (playerSection.classList.contains('hidden') === false) {
                playerStatusMessage.innerText = "Error: " + data.message;
                playerStatusMessage.className = "status-message error";
            } else if (gameRoomSection.classList.contains('hidden') === false) {
                gameRoomStatus.innerText = "Error: " + data.message;
                gameRoomStatus.className = "status-message error";
            } else {
                statusMessage.innerText = "Error: " + data.message;
                statusMessage.className = "status-message error";
            }
        });
    </script>
</body>
</html>